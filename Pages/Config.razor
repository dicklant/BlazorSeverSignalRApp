@page "/config"

<PageTitle>MS Teams config</PageTitle>

<h1>Config page</h1>

<TeamsApplication RequireAuthentication="false">
    <ApplicationTemplate>
        @{ this.Context = context; }

        <label for="tab-name">Tab Name</label>
        <div>
            <input id="tab-name" type="text" @onchange="this.TabNameChangedAsync" />
        </div>
    </ApplicationTemplate>
</TeamsApplication>

@code{
    ApplicationContext Context;

    [Inject]
    NavigationManager NavMan { get; set; }

    [JSInvokable]
    public async Task SavingAsync(Dictionary<string, object> data)
    {
        // Code removed for clarity...
        
    }

    private bool isValid;
    private async Task TabNameChangedAsync(ChangeEventArgs e)
    {
        var name = e.Value as string;
        bool valid = name?.Length > 0;
        if(valid != isValid)
        {
            isValid = valid;
            await this.Context.TeamsInterop.Settings.SetValidityStateAsync(isValid);
        }

        if (isValid)
        {
            var settings = new Settings
            {
                ContentUrl = this.NavMan.ToAbsoluteUri("/tabapp").ToString(),
                RemoveUrl = this.NavMan.ToAbsoluteUri("/tabremove").ToString(),
                SuggestedDisplayName = name,
                EntityId = "com.blazorade.teams.demo.tabapp"
            };
            await this.Context.TeamsInterop.Settings.RegisterOnSaveHandlerAsync(settings, this.SavingAsync);
        }      
    }
}